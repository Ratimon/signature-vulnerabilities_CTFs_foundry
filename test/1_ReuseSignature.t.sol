// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.19;

// import "@forgex-std/console2.sol";

import {Test} from "@forge-std/Test.sol";
import {ReuseSignature} from "@main/1_ReuseSignature.sol";

// import {ECDSA} from "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract ReuseSignatureTest is Test {

    // using ECDSA for bytes32;


    string mnemonic = "test test test test test test test test test test test junk";
    // uint256 deployerPrivateKey = vm.deriveKey(mnemonic, "m/44'/60'/0'/0/", 1); //  address = 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
    uint256 attackerPrivateKey = vm.deriveKey(mnemonic, "m/44'/60'/0'/0/", 2); //  address = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC

    // address deployer = vm.addr(deployerPrivateKey);
    address attacker = vm.addr(attackerPrivateKey);

    uint256 polygonFork;
    string POLYGON_RPC_URL = vm.rpcUrl("POLYGON");

    ReuseSignature reuseSignature;

    function setUp() public {
        // polygonFork = vm.createFork(POLYGON_RPC_URL);
       
        // reuseSignature = ReuseSignature(0xa94a3AB66FaBc6e9F672924a76587c16322752E9);
        reuseSignature = new ReuseSignature();
    }

    function testFork_isSolved() public {
        vm.startPrank(attacker);
        // vm.selectFork(polygonFork);
         // block at 42370728
        // vm.rollFork(42370800);

        // string memory message = 'e232b6c3b12e8ee93e9b40ab23e81c2b4adcb84b7acb4544969f5c985ff5bcd0';

        // uint8 v = 28;
        // bytes32 r = hex"3345b4f973b36067316c765ddaaa03a40ddceb7c2d8c98dbad08e6acd6c7dea6";
        // bytes32 s = hex"0937659b8423773de375e2461d3ad96de09eb0972fcb81a82f378ca5454fd1bf";
        // bytes memory signature = abi.encodePacked(r, s , v);


        string memory message = "fb0635fdf881cab32568c97991e93874a7f8fcd25b1c0e5d999e46af7c6818b5";
        bytes memory signature = hex"0a2fa8c525c250ef254dd235f1d43c23c58485d7894dd29f87c1f247008b0aab61d083078c616770c18cd701a6e21441e6c7919950bfb0e813acced2a450c7e41b";


        // console2.logBytes32(keccak256(hex"02f9074d81898085174876e800856045d782b6830700e58080b907346080604052600080546001600160a01b031916700ccc7439f4972897ccd70994123e0921bc17905534801561003357600080fd5b506106f1806100436000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806304989798146100465780634125fcce1461005b5780635f35c0921461008b575b600080fd5b6100596100543660046105e4565b6100c9565b005b60005461006e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b9610099366004610533565b805160208183018101805160018252928201919093012091525460ff1681565b6040519015158152602001610082565b600061014185856040516020016100e1929190610660565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b600054604080516020601f87018190048102820181019092528581529293506001600160a01b039091169161019391869086908190840183828082843760009201919091525086939250506102579050565b6001600160a01b0316146101ee5760405162461bcd60e51b815260206004820152601360248201527f7369676e6174757265206e6f742076616c69640000000000000000000000000060448201526064015b60405180910390fd5b60018383604051610200929190610650565b9081526040519081900360200190205460ff161561021d57600080fd5b6001808484604051610230929190610650565b908152604051908190036020019020805491151560ff199092169190911790555050505050565b6000806000610266858561027b565b91509150610273816102c1565b509392505050565b6000808251604114156102b25760208301516040840151606085015160001a6102a68782858561042d565b945094505050506102ba565b506000905060025b9250929050565b60008160048111156102d5576102d561068f565b14156102de5750565b60018160048111156102f2576102f261068f565b14156103405760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101e5565b60028160048111156103545761035461068f565b14156103a25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101e5565b60038160048111156103b6576103b661068f565b141561042a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016101e5565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561046457506000905060036104e8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156104b8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104e1576000600192509250506104e8565b9150600090505b94509492505050565b60008083601f84011261050357600080fd5b50813567ffffffffffffffff81111561051b57600080fd5b6020830191508360208285010111156102ba57600080fd5b60006020828403121561054557600080fd5b813567ffffffffffffffff8082111561055d57600080fd5b818401915084601f83011261057157600080fd5b813581811115610583576105836106a5565b604051601f8201601f19908116603f011681019083821181831017156105ab576105ab6106a5565b816040528281528760208487010111156105c457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080604085870312156105fa57600080fd5b843567ffffffffffffffff8082111561061257600080fd5b61061e888389016104f1565b9096509450602087013591508082111561063757600080fd5b50610644878288016104f1565b95989497509550505050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220deea54fa1a454f8490377164cbcdbbb3d751c4d425cb3d52d301450aa166512c64736f6c63430008070033c0"));

        // console2.logBytes32(keccak256(abi.encode(message)));

        // console2.logBytes32(keccak256(abi.encode(message))
        //     .toEthSignedMessageHash());


        reuseSignature.challenge(message, signature);


        // console2.logBytes32(keccak256(abi.encode(message)));

        // console2.logBytes32(keccak256(abi.encode(message))
        //     .toEthSignedMessageHash());


        vm.stopPrank();
    }

}